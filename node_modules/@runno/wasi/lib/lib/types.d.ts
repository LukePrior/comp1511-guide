import { BigIntPolyfillType } from "./polyfills/bigint";
import { WASI_FILETYPE } from "./constants";
export interface Rights {
    base: BigIntPolyfillType;
    inheriting: BigIntPolyfillType;
}
export interface File {
    real: number;
    offset?: bigint;
    filetype?: WASI_FILETYPE;
    rights: Rights;
    path?: any;
    fakePath?: any;
}
export declare type Exports = {
    [key: string]: any;
};
export declare type WASIBindings = {
    hrtime: () => bigint;
    exit: (rval: number) => void;
    kill: (signal: string) => void;
    randomFillSync: <T>(buffer: T, offset: number, size: number) => T;
    isTTY: (fd: number) => boolean;
    fs: any;
    path: any;
};
export declare type WASIArgs = string[];
export declare type WASIEnv = {
    [key: string]: string | undefined;
};
export declare type WASIPreopenedDirs = {
    [key: string]: string;
};
export declare type WASIConfigOld = {
    preopenDirectories?: WASIPreopenedDirs;
    env?: WASIEnv;
    args?: WASIArgs;
    bindings?: WASIBindings;
};
export declare type WASIConfig = {
    preopens?: WASIPreopenedDirs;
    env?: WASIEnv;
    args?: WASIArgs;
    bindings?: WASIBindings;
};
