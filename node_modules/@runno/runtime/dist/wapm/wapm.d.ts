import WasmTerminal from "@runno/terminal";
import { WasmFs } from "../wasmfs";
declare type PackageVersion = {
    version: string;
    package: {
        name: string;
        displayName: string;
    };
    filesystem: Array<{
        wasm: string;
        host: string;
    }>;
    distribution: {
        downloadUrl: string;
    };
    modules: Array<{
        name: string;
        publicUrl: string;
        abi: string;
    }>;
    commands: Array<{
        command: string;
        module: {
            name: string;
            abi: string;
            source: string;
            publicUrl: string;
        };
    }>;
};
export default class WAPM {
    wasmTerminal: WasmTerminal | undefined;
    wapmInstalledPackages: PackageVersion[];
    wapmCommands: {
        [name: string]: Uint8Array;
    };
    uploadedCommands: {
        [name: string]: Uint8Array;
    };
    cachedModules: {
        [name: string]: Uint8Array;
    };
    wasmFs: WasmFs;
    callbackCommands: {
        [name: string]: Function;
    };
    _hiddenInput: HTMLInputElement;
    currentInstallResolver: Function | undefined;
    constructor(wasmFs: WasmFs, wasmTerminal?: WasmTerminal);
    regenerateWAPMCommands(): Promise<void>;
    fetchBinary(binaryUrl: string): Promise<Uint8Array>;
    isCommandCached(commandName: string): boolean;
    runCommand(options: {
        args: string[];
        env: {
            [name: string]: string;
        };
    }): Promise<any>;
    installWasmBinary(commandName: string, wasmBinary: Uint8Array): Promise<void>;
    _getCachedCommand(commandName: string): Function | Uint8Array | undefined;
    _wapmCallbackCommand(options: {
        args: string[];
    }, wasmFs: WasmFs): Promise<string>;
    _help(): string;
    _list(): string;
    _install(packageName: string, wasmFs: WasmFs): Promise<string>;
    _uninstall(packageOrCommandName: string): Promise<string>;
    _installWapmPackage(packageVersion: PackageVersion, wasmFs: WasmFs): Promise<boolean>;
    _installFromWapmCommand({ args, env }: {
        args: string[];
        env: {
            [name: string]: string;
        };
    }, wasmFs: WasmFs): Promise<any>;
    _installFromFile(): Promise<string>;
    _onHiddenInputChange(event: Event): void;
}
export {};
